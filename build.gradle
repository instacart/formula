buildscript {
    ext {
        kotlinVersion = "1.6.10"

        versions = [:]
        libraries = [:]
        constants = [
                minSdk      : 21,
                targetSdk   : 31,
                compileSdk  : 31
        ]
    }

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:7.0.4"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.vanniktech:gradle-android-junit-jacoco-plugin:0.16.0"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:1.6.10"
        classpath "org.jetbrains.dokka:android-documentation-plugin:1.6.10"
        classpath "com.vanniktech:gradle-maven-publish-plugin:0.18.0"
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.42.0"
}

apply from: "dependencies.gradle"

apply plugin: "org.jetbrains.dokka"

allprojects {
    repositories {
        google()
        mavenCentral()
    }

    tasks.withType(org.jetbrains.dokka.gradle.DokkaTaskPartial).configureEach {
        dokkaSourceSets.named("main") {
            configuration {
                jdkVersion.set(8)
                skipDeprecated.set(true)
                skipEmptyPackages.set(true)
                reportUndocumented.set(false)
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

apply plugin: "com.vanniktech.android.junit.jacoco"
junitJacoco {
    // WARNING! Don"t upgrade unless https://github.com/Malinskiy/danger-jacoco/issues/10 is fixed
    jacocoVersion = "0.8.2"
    excludes = [
            // Defaults
            "**/androidx/**/*.*",
            "**/*\$\$*",
            "**/BuildConfig.*",
            "**/Manifest*.*",
            "**/*\$Lambda\$*.*", // Jacoco can not handle several "$" in class name.
            "**/*\$inlined\$*.*", // Kotlin specific, Jacoco can not handle several "$" in class name.
            "**/com/instacart/formula/test/**/*.*"
    ]
    ignoreProjects = [
            "samples/*"
    ]
    includeNoLocationClasses = true
    includeInstrumentationCoverageInMergedReport = true
}

apply from: "gradle/merge-reports.gradle"

tasks.register("install") {
    def publishTasks = []
    project.subprojects.forEach { project ->
        def installTask = project.tasks.findByName("install") ?: project.tasks.findByName("publishToMavenLocal")
        if (installTask != null) {
            publishTasks.add(installTask)
        }
    }
    dependsOn publishTasks
}

