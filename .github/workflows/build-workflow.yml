name: Build
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DANGER_GITHUB_API_TOKEN: ${{ secrets.DANGER_GITHUB_API_TOKEN }}
    steps:
      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 17
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true
      - name: Run Core Tests
        run: ./gradlew :formula:test
      - name: Run Formula Android Unit Tests
        run: ./gradlew :formula-android:testRelease
      - name: Run Formula Android Instrumentation Tests
        run: ./gradlew :formula-android-tests:testRelease
      - name: Run Formula Test Module tests
        run: ./gradlew :formula-test:test
      - name: Run Formula Lint Tests
        run: ./gradlew :formula-lint:build
      - name: Generate Jacoco Report
        run: ./gradlew jacocoTestReportMerged
      - name: Save Jacoco Report
        run: |
          mkdir -p ~/jacoco/
          find . -type f -regex ".*/build/reports/jacoco/jacoco.xml" -exec cp {} ~/jacoco/ \;
      - name: Save test results
        if: always()
        run: |
          ./gradlew mergeReports
          mkdir -p ~/junit/
          find . -type f -regex ".*/build/reports/allTests/.*xml" -exec cp {} ~/junit/ \;
      - name: Publish Coverage Results
        if: github.event_name == 'pull_request'
        run: bundle exec danger --verbose --dangerfile=CoverageDangerfile --danger_id=coverage

  benchmarks:
    runs-on: ubuntu-latest
    env:
      DANGER_GITHUB_API_TOKEN: ${{ secrets.DANGER_GITHUB_API_TOKEN }}
    steps:
      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 17
      - name: Checkout the code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Need full history for baseline branch
      - name: Download baseline (PR only)
        if: github.event_name == 'pull_request'
        run: |
          # Fetch and extract baseline from benchmarks branch
          git fetch origin benchmarks:benchmarks 2>/dev/null || echo "No benchmarks branch yet"
          if git rev-parse benchmarks >/dev/null 2>&1; then
            git checkout benchmarks -- baselines/master.json || echo "No baseline file yet"
          fi
      - name: Run Performance Benchmarks
        run: ./gradlew :formula-performance:jmh
      - name: Install Ruby (PR only)
        if: github.event_name == 'pull_request'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true
      - name: Report Benchmark Results (PR only)
        if: github.event_name == 'pull_request'
        run: bundle exec danger --verbose --dangerfile=BenchmarkDangerfile --danger_id=benchmarks
      - name: Store baseline (master only)
        if: github.ref == 'refs/heads/master'
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Fetch or create benchmarks branch
          git fetch origin benchmarks:benchmarks 2>/dev/null || git checkout --orphan benchmarks
          if git rev-parse benchmarks >/dev/null 2>&1; then
            git checkout benchmarks
          else
            git checkout --orphan benchmarks
            git rm -rf . 2>/dev/null || true
          fi

          # Store baseline
          mkdir -p baselines
          cp formula-performance/build/results/jmh/results.json baselines/master.json
          git add baselines/master.json
          git diff --staged --quiet || git commit -m "Update baseline from ${{ github.sha }}"
          git push origin benchmarks

  assemble_samples:
    runs-on: ubuntu-latest
    steps:
      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 17
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Assemble Counter
        run: ./gradlew :samples:counter:assembleDebug
      - name: Assemble Stopwatch Sample
        run: ./gradlew :samples:stopwatch:assembleDebug
      - name: Assemble Todo App
        run: ./gradlew :samples:todoapp:assembleDebug
      - name: Assemble Custom Stream App
        run: ./gradlew :samples:custom-network-state-stream:assembleDebug
      - name: Assemble Composition Sample
        run: ./gradlew :samples:composition:assembleDebug
      - name: Assemble Stopwatch Compose Sample
        run: ./gradlew :samples:stopwatch-compose:assembleDebug
      - name: Assemble Stopwatch Kotlin Coroutine Sample
        run: ./gradlew :samples:stopwatch-coroutines:assembleDebug
      - name: Assemble Fragments Navigation Sample
        run: ./gradlew :samples:navigation-fragments:assembleDebug
      - name: Run Samples Unit Tests
        run: |
          set -euo pipefail
          TASKS=()
          for dir in samples/*; do
            [ -d "$dir" ] || continue
            module_name=$(basename "$dir")
            TASKS+=(":samples:${module_name}:testDebugUnitTest")
          done
          ./gradlew "${TASKS[@]}"
      - name: Publish all artifacts locally
        run: |
          ./gradlew :formula:build
          ./gradlew :formula-android:build
          ./gradlew :formula-test:build 
          ./gradlew :formula-android-compose:build 
          ./gradlew :formula-lint:build
          ./gradlew publishToMavenLocal --no-parallel --no-daemon