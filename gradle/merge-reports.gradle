subprojects { project ->
    if (!project.name.contains("formula")) {
        return
    }

    project.plugins.withId("com.android.application") {
        disableHtmlTestReport(project)
    }

    project.plugins.withId("com.android.library") {
        disableHtmlTestReport(project)
    }
}

// make sure this project depends on the evaluation of all sub projects so that
// it's evaluated last.
project.evaluationDependsOnChildren()

afterEvaluate {

    def testTasks = subprojects.findAll { it.name.contains("formula") }.collect { it.tasks.withType(Test) }.flatten()
    if (testTasks.isEmpty()) {
        throw IllegalStateException("misconfiguration: no test tasks found")
    }

    task mergeReports(type: Copy) {
        from { testTasks*.reports.junitXml.destination } {
            exclude("**/binary/*")
        }
        into { file("$buildDir/reports/allTests") }

        doLast {
            println "reports merged for ${testTasks.size()} test tasks"
        }
    }
}

def disableHtmlTestReport(Project project) {
    project.android {
        testOptions {
            unitTests.all {
                reports.html.enabled = false
            }
        }
    }
}